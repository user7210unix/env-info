#!/bin/bash

# Reset color
reset=$(tput sgr0)

# Colors for the dots
dot1=$(tput setaf 0)  # Black
dot2=$(tput setaf 8)  # Gray
dot3=$(tput setaf 7)  # White
dot4=$(tput setaf 15) # Bright white

# Functions with fallbacks and simplified outputs
get_username() {
    whoami 2>/dev/null || echo "Unknown"
}

get_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo "$NAME"
    else
        echo "Unknown"
    fi
}

get_arch() {
    uname -m 2>/dev/null || echo "Unknown"
}

get_kernel() {
    uname -r 2>/dev/null || echo "Unknown"
}

get_uptime() {
    uptime -p 2>/dev/null | sed 's/up //' || echo "Unknown"
}

get_init() {
    if [ -d /run/systemd/system ]; then
        echo "systemd"
    elif [ -f /sbin/init ] && strings /sbin/init | grep -q sysvinit 2>/dev/null; then
        echo "sysvinit"
    elif command -v runit >/dev/null 2>&1; then
        echo "runit"
    else
        echo "Custom"
    fi
}

get_cpu() {
    local cpu=$(lscpu 2>/dev/null | grep "Model name" | awk -F: '{print $2}' | sed 's/^[ \t]*//' | sed 's/ \+/ /g')
    if [ -n "$cpu" ] && [ "$cpu" != "Unknown" ]; then
        model=$(echo "$cpu" | sed 's/.*\(i[3-7]-[0-9]\+[A-Za-z]*\).*/\1/' | sed 's/.*\(Ryzen [0-9] [0-9]\+\).*/\1/')
        freq=$(echo "$cpu" | grep -o "[0-9]\+\.[0-9]\+GHz" || echo "")
        if [ -n "$model" ] && [ -n "$freq" ]; then
            echo "$model $freq"
        else
            echo "$model"
        fi
    else
        echo "Unknown"
    fi
}

get_gpu() {
    local gpu=$(lspci 2>/dev/null | grep -i vga | grep -i nvidia | awk -F: '{print $3}' | sed 's/^[ \t]*//')
    if [ -n "$gpu" ]; then
        echo "$gpu" | sed 's/.*\[GeForce [^]]*\].*/\0/' | sed 's/.*\[GeForce \(.*\)\].*/GeForce \1/'
    else
        echo "N/A"
    fi
}

get_vram() {
    if command -v nvidia-smi >/dev/null 2>&1; then
        nvidia-smi --query-gpu=memory.total --format=csv,noheader,nounits | awk '{print $1 " MiB"}'
    else
        echo "N/A"
    fi
}

get_ram() {
    free -m 2>/dev/null | awk '/Mem:/ {print $3 "/" $2 " MiB"}' || echo "Unknown"
}

get_disk() {
    df -h / 2>/dev/null | awk 'NR==2 {print $3 "/" $2 " (" $5 ")"}' || echo "Unknown"
}

get_monitor() {
    if command -v xrandr >/dev/null 2>&1; then
        xrandr | grep " connected" | grep -o "[0-9]\+x[0-9]\+@[0-9.]\+Hz" | head -1 || echo "N/A"
    else
        echo "N/A"
    fi
}

get_editor() {
    if command -v nvim >/dev/null 2>&1; then
        echo "nvim"
    elif [ -n "$EDITOR" ]; then
        basename "$EDITOR"
    else
        echo "N/A"
    fi
}

get_shell() {
    basename "$SHELL" 2>/dev/null || echo "Unknown"
}

get_packages() {
    if [ -f /etc/os-release ] && grep -q "Linux From Scratch" /etc/os-release; then
        # Look for sources recursively in $HOME/sources or a custom LFS source directory
        local source_dir="${LFS_SOURCES:-$HOME/sources}"
        if [ -d "$source_dir" ]; then
            # Count all tarballs recursively for base LFS
            base_count=$(find "$source_dir" -type f -name "*.tar.*" -not -name "*blfs*" -not -path "*blfs*" | wc -l)
            # Count BLFS tarballs (include "blfs" in name or path)
            blfs_count=$(find "$source_dir" -type f -name "*.tar.*" \( -name "*blfs*" -o -path "*blfs*" \) | wc -l)
            # Count executables in /usr/bin/
            bin_count=$(find /usr/bin/ -type f -executable | wc -l)
            echo "Sources ${base_count} base, ${blfs_count} blfs, ${bin_count} (/usr/bin/)"
        else
            echo "Sources 0 base, 0 blfs, 0 (/usr/bin/)"
        fi
    elif command -v pacman >/dev/null 2>&1; then
        pacman -Q 2>/dev/null | wc -l | awk '{print $1 " (pacman)"}'
    elif command -v dpkg >/dev/null 2>&1; then
        dpkg -l 2>/dev/null | grep ^ii | wc -l | awk '{print $1 " (dpkg)"}'
    else
        echo "N/A"
    fi
}

get_library() {
    if command -v ldd >/dev/null 2>&1 && ldd --version 2>&1 | grep -q musl; then
        echo "Musl"
    else
        echo "Glibc"
    fi
}

get_hardened() {
    if [ -f /proc/config.gz ] && zcat /proc/config.gz | grep -q CONFIG_CC_STACKPROTECT 2>/dev/null; then
        echo "Yes"
    else
        echo "No"
    fi
}

get_wm() {
    if pgrep -f "openbox" >/dev/null 2>&1; then
        echo "Openbox"
    elif pgrep -f "fluxbox" >/dev/null 2>&1; then
        echo "Fluxbox"
    elif pgrep -f "i3" >/dev/null 2>&1; then
        echo "i3"
    elif pgrep -f "bspwm" >/dev/null 2>&1; then
        echo "bspwm"
    elif [ -n "$XDG_CURRENT_DESKTOP" ] && echo "$XDG_CURRENT_DESKTOP" | grep -qi "openbox\|fluxbox\|i3\|bspwm"; then
        echo "$XDG_CURRENT_DESKTOP"
    elif [ -n "$DESKTOP_SESSION" ] && echo "$DESKTOP_SESSION" | grep -qi "openbox\|fluxbox\|i3\|bspwm"; then
        echo "$DESKTOP_SESSION"
    else
        echo "N/A"
    fi
}

get_de() {
    if [ -n "$XDG_SESSION_DESKTOP" ]; then
        case "$XDG_SESSION_DESKTOP" in
            *openbox*) echo "Openbox" ;;
            *plasma*) echo "KDE Plasma" ;;
            *xfce*) echo "XFCE4" ;;
            *mate*) echo "MATE" ;;
            *) echo "$XDG_SESSION_DESKTOP" ;;
        esac
    elif [ -n "$DESKTOP_SESSION" ]; then
        case "$DESKTOP_SESSION" in
            *gnome*) echo "GNOME" ;;
            *plasma*) echo "KDE Plasma" ;;
            *xfce*) echo "XFCE4" ;;
            *mate*) echo "MATE" ;;
            *) echo "$DESKTOP_SESSION" ;;
        esac
    elif pgrep -f "gnome-session" >/dev/null 2>&1; then
        echo "GNOME"
    elif pgrep -f "plasma" >/dev/null 2>&1; then
        echo "KDE Plasma"
    elif pgrep -f "xfce4-session" >/dev/null 2>&1; then
        echo "XFCE4"
    elif pgrep -f "mate-session" >/dev/null 2>&1; then
        echo "MATE"
    else
        echo "N/A"
    fi
}

get_song() {
    if command -v mpc >/dev/null 2>&1; then
        mpc current 2>/dev/null || echo "N/A"
    else
        echo "N/A"
    fi
}

# Get all system information
username=$(get_username)
distro=$(get_distro)
arch=$(get_arch)
kernel=$(get_kernel)
uptime=$(get_uptime)
init=$(get_init)
cpu=$(get_cpu)
gpu=$(get_gpu)
vram=$(get_vram)
ram=$(get_ram)
disk=$(get_disk)
monitor=$(get_monitor)
editor=$(get_editor)
shell=$(get_shell)
packages=$(get_packages)
library=$(get_library)
hardened=$(get_hardened)
wm=$(get_wm)
de=$(get_de)
song=$(get_song)

# Clear the screen
clear

# Print the username
echo -e "\n${username}\n"

# Print the color dots
echo -e "${dot1}● ${dot2}● ${dot3}● ${dot4}●${reset}\n"

# Print system information, hide N/A or Unknown
echo -e "---- System ----"
[ "$distro" != "Unknown" ] && echo -e "Distro  $distro"
[ "$arch" != "Unknown" ] && echo -e "Arch    $arch"
[ "$kernel" != "Unknown" ] && echo -e "Kernel  $kernel"
[ "$uptime" != "Unknown" ] && echo -e "Uptime  $uptime"
[ "$init" != "Custom" ] && echo -e "Init    $init"
[ "$library" != "Unknown" ] && echo -e "Library $library"
echo -e "Hardened $hardened"
echo -e ""

echo -e "---- Hardware ----"
[ "$cpu" != "Unknown" ] && echo -e "CPU     $cpu"
[ "$gpu" != "N/A" ] && echo -e "GPU     $gpu"
[ "$vram" != "N/A" ] && echo -e "VRAM    $vram"
[ "$ram" != "Unknown" ] && echo -e "RAM     $ram"
[ "$disk" != "Unknown" ] && echo -e "Disk    $disk"
echo -e ""

echo -e "---- Software ----"
[ "$editor" != "N/A" ] && echo -e "Editor  $editor"
[ "$shell" != "Unknown" ] && echo -e "Shell   $shell"
[ "$packages" != "N/A" ] && echo -e "Packages $packages"
[ "$wm" != "N/A" ] && echo -e "WM      $wm"
[ "$song" != "N/A" ] && echo -e "Song    $song"
echo -e ""

# Reset cursor
tput cud 1
