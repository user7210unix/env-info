#!/usr/bin/env python3
import os
import re
import socket
import psutil
import shutil
import time

# ANSI color codes
RED = "\033[1;31m"
GREEN = "\033[1;32m"
YELLOW = "\033[1;33m"
BLUE = "\033[1;34m"
PURPLE = "\033[1;35m"
CYAN = "\033[1;36m"
WHITE = "\033[1;37m"
GREY = "\033[3;90m"  
BOLD = "\033[1m"     
RESET = "\033[0m"
C1 = "\033[30m" 
C3 = "\033[36m"       

def logo():
    c1 = "\x1b[0m"
    c2 = "\x1b[1;34m"
    c3 = "\x1b[0m"
    return rf"""
      {c2}#####       
     {c2}#######      
     {c2}##{c1}O{c2}#{c1}O{c2}##      
     {c2}#{c3}#####{c2}#      
     {c2}##{c1}##{c3}###{c1}##{c2}##     
    {c2}#{c1}##########{c2}##    
   {c2}#{c1}############{c2}##   
   {c2}#{c1}############{c2}###  
  {c3}##{c2}#{c1}###########{c2}##{c3}#  
{c3}######{c2}#{c1}#######{c2}#{c3}######
{c3}#######{c2}#{c1}#####{c2}#{c3}#######
   {c3}#####{c2}#######{c3}#####{c2}  
"""

# Gradient title colors
TITLE_COLORS = [GREY]

def fix_length(text):
    pattern = re.compile(r"\x1B\[[0-?9;]*[mK]")
    matches = re.findall(pattern, text)
    return sum(len(match) for match in matches)

def center_text(text):
    terminal_width = shutil.get_terminal_size().columns
    ansi_length = fix_length(text)
    text_clean = re.sub(r"\x1B\[[0-?9;]*[mK]", "", text)
    padding = (terminal_width - len(text_clean)) // 2
    return " " * padding + text

def print_gradient_title():
    title = "System Fetch"
    output = ""
    for i, char in enumerate(title):
        color = TITLE_COLORS[i % len(TITLE_COLORS)]
        output += f"{color}{char}{RESET}"
    print(center_text(output))

def get_distro():
    try:
        with open("/etc/os-release") as f:
            for line in f:
                if line.startswith("PRETTY_NAME"):
                    return f"{GREY}{line.split('=')[1].strip().strip('\"')}{RESET}"
    except FileNotFoundError:
        return f"{GREY}Linux{RESET}"
    return f"{GREY}Unknown{RESET}"

def get_memory():
    mem = psutil.virtual_memory()
    used = mem.used / (1024 ** 3)
    total = mem.total / (1024 ** 3)
    return f"{GREY}{used:.2f} / {total:.2f} GiB{RESET}"

def get_kernel():
    return f"{GREY}{os.uname().release}{RESET}"

def get_uptime():
    boot_time = psutil.boot_time()
    current_time = time.time()
    uptime_seconds = current_time - boot_time
    days = int(uptime_seconds // (24 * 3600))
    hours = int((uptime_seconds % (24 * 3600)) // 3600)
    minutes = int((uptime_seconds % 3600) // 60)
    uptime_str = ""
    if days > 0:
        uptime_str += f"{days} days, "
    if hours > 0 or days > 0:
        uptime_str += f"{hours} hours, "
    uptime_str += f"{minutes} minutes"
    return f"{GREY}{uptime_str}{RESET}"


def get_disk():
    disk = psutil.disk_usage("/")
    used = disk.used / (1024 ** 3)
    total = disk.total / (1024 ** 3)
    percent = disk.percent
    return f"{GREY}{used:.1f} / {total:.1f} GiB ({percent}%){RESET}"

def get_shell():
    return f"{GREY}{os.path.basename(os.environ.get('SHELL', 'unknown'))}{RESET}"

def get_wm():
    wm = os.environ.get("XDG_CURRENT_DESKTOP", "")
    if not wm:
        try:
            wm = os.popen("wmctrl -m 2>/dev/null | grep 'Name' | cut -d ':' -f2").read().strip()
        except:
            wm = "Unknown"
    return f"{GREY}{wm or 'Unknown'}{RESET}"

def get_init():
    try:
        if os.path.exists("/run/runit"):
            return f"{GREY}runit{RESET}"
        elif os.path.exists("/run/systemd/system"):
            return f"{GREY}systemd{RESET}"
        elif os.path.exists("/sbin/init") and os.readlink("/sbin/init").endswith("sysvinit"):
            return f"{GREY}sysvinit{RESET}"
        else:
            return f"{GREY}custom{RESET}"
    except Exception:
        return f"{GREY}Unknown{RESET}"

def get_packages():
    if os.path.exists("/usr/bin/pacman"):
        count = len(os.popen("pacman -Q").readlines())
        return f"{GREY}{count} (pacman){RESET}"
    elif os.path.exists("/usr/bin/dpkg"):
        count = len(os.popen("dpkg -l | grep ^ii").readlines())
        return f"{GREY}{count} (dpkg){RESET}"
    elif os.path.exists("/usr/bin/emerge"):
        count = len(os.popen("qlist -I").readlines())
        return f"{GREY}{count} (emerge){RESET}"
    elif os.path.exists("/sources"):
        tarballs = 0
        patches = 0
        for _, _, files in os.walk("/sources"):
            for file in files:
                file = file.lower()
                if file.endswith((".patch", ".diff")):
                    patches += 1
                elif any(file.endswith(ext) for ext in (
                    ".tar.gz", ".tar.bz2", ".tar.xz", ".tar.zst",
                    ".tar.lz", ".tar.lzma", ".tgz", ".tbz2", ".txz", ".tlz")):
                    tarballs += 1
        return f"{GREY}{tarballs} tarballs, {patches} patches{RESET}"
    return f"{GREY}Unknown{RESET}"

def get_colors():
    colors = ""
    for i in range(6):
        colors += f"\033[3{i+1};1m██{RESET} "
    return colors


def display():
    os.system("clear")
    for line in logo().split("\n"):
        print(center_text(line))
    print_gradient_title()
    print(center_text(f"{PURPLE}{'═' * 40}{RESET}"))

    label_width = 10  # Width for labels 
    value_width = 30  # Width for values
    packages_label = "Tarballs:" if "Linux From Scratch" in get_distro() else "Packages:"  # shows tarballs if lfs system
    sys_info = [
        f"{BLUE}{BOLD}OS:{RESET}{' ' * (label_width - 3)}{get_distro().rjust(value_width)}",
        f"{BLUE}{BOLD}Kernel:{RESET}{' ' * (label_width - 7)}{get_kernel().rjust(value_width)}",
        f"{BLUE}{BOLD}Uptime:{RESET}{' ' * (label_width - 7)}{get_uptime().rjust(value_width)}",
        f"{BLUE}{BOLD}Memory:{RESET}{' ' * (label_width - 7)}{get_memory().rjust(value_width)}",
        f"{BLUE}{BOLD}Shell:{RESET}{' ' * (label_width - 6)}{get_shell().rjust(value_width)}",
        f"{BLUE}{BOLD}WM:{RESET}{' ' * (label_width - 3)}{get_wm().rjust(value_width)}",
        f"{BLUE}{BOLD}{packages_label}{RESET}{' ' * (label_width - len(packages_label))}{get_packages().rjust(value_width)}",
        f"{BLUE}{BOLD}Init:{RESET}{' ' * (label_width - 5)}{get_init().rjust(value_width)}",
    ]
    for line in sys_info:
        print(center_text(line))
    print(center_text(f"{PURPLE}{'═' * 40}{RESET}"))

    # Color palette
    print(center_text(f"{WHITE}Colors:{RESET} {get_colors()}"))

if __name__ == "__main__":
    try:
        display()
    except KeyboardInterrupt:
        print("\033[0m")  
